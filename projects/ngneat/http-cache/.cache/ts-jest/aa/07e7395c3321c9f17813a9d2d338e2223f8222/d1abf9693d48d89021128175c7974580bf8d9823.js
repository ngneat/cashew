"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ttlManager_1 = require("../ttlManager");
var mocks_spec_1 = require("./mocks.spec");
describe('ttlManager', function () {
    var ttlManager;
    var ttl = 1000;
    // const getTime = spyOn(Date.prototype, 'getTime');
    beforeEach(function () {
        ttlManager = new ttlManager_1.DefaultTTLManager(mocks_spec_1.config);
    });
    // describe('valid', () => {
    //   it('should be valid if has a key and ', () => {
    //     expect(ttlManager.has(notExistingKey)).toBeFalsy();
    //   });
    //   it('should return false', () => {
    //     expect(ttlManager.has(existingKey)).toBeTruthy();
    //   });
    // });
    fdescribe('set', function () {
        it('should get the cached response', function () {
            ttlManager.set('key', 1000);
            expect(ttlManager.isValid('key')).toBeTruthy();
        });
    });
    describe('delete', function () {
        it('should clear storage when call without a key', function () {
            spyOn(ttlManager.cache, 'clear');
            ttlManager.delete();
            expect(ttlManager.cache.clear).toHaveBeenCalled();
        });
        it('should call delete when given key', function () {
            spyOn(ttlManager.cache, 'delete');
            ttlManager.delete('key');
            expect(ttlManager.cache.delete).toHaveBeenCalled();
        });
        it('should delete by regex', function () {
            var key = 'aaa';
            ttlManager.set(key, ttl);
            var regex = new RegExp('aa');
            ttlManager.delete(regex);
            expect(ttlManager.isValid(key)).toBeFalsy();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxJdGF5XFxwcm9qZWN0c1xcb3BlbnNvdXJjZXNcXGh0dHAtY2FjaGVcXHByb2plY3RzXFxuZ25lYXRcXGh0dHAtY2FjaGVcXHNyY1xcbGliXFx0ZXN0XFx0dGxNYW5hZ2VyLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSw0Q0FBNEQ7QUFDNUQsMkNBQWtEO0FBRWxELFFBQVEsQ0FBQyxZQUFZLEVBQUU7SUFFckIsSUFBSSxVQUFzQixDQUFDO0lBQzNCLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQztJQUNqQixvREFBb0Q7SUFFcEQsVUFBVSxDQUFDO1FBQ1QsVUFBVSxHQUFHLElBQUksOEJBQWlCLENBQUMsbUJBQU0sQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQyxDQUFDO0lBRUgsNEJBQTRCO0lBQzVCLG9EQUFvRDtJQUNwRCwwREFBMEQ7SUFDMUQsUUFBUTtJQUNSLHNDQUFzQztJQUN0Qyx3REFBd0Q7SUFDeEQsUUFBUTtJQUNSLE1BQU07SUFFTixTQUFTLENBQUMsS0FBSyxFQUFFO1FBQ2YsRUFBRSxDQUFDLGdDQUFnQyxFQUFFO1lBQ25DLFVBQVUsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzVCLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDakQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxRQUFRLEVBQUU7UUFDakIsRUFBRSxDQUFDLDhDQUE4QyxFQUFFO1lBQ2pELEtBQUssQ0FBRSxVQUFrQixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztZQUMxQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDcEIsTUFBTSxDQUFFLFVBQWtCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDN0QsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsbUNBQW1DLEVBQUU7WUFDdEMsS0FBSyxDQUFFLFVBQWtCLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQzNDLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDekIsTUFBTSxDQUFFLFVBQWtCLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDOUQsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsd0JBQXdCLEVBQUU7WUFDM0IsSUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDO1lBQ2xCLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3pCLElBQU0sS0FBSyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQy9CLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDekIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUM5QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxJdGF5XFxwcm9qZWN0c1xcb3BlbnNvdXJjZXNcXGh0dHAtY2FjaGVcXHByb2plY3RzXFxuZ25lYXRcXGh0dHAtY2FjaGVcXHNyY1xcbGliXFx0ZXN0XFx0dGxNYW5hZ2VyLnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUVExNYW5hZ2VyLCBEZWZhdWx0VFRMTWFuYWdlcn0gZnJvbSAnLi4vdHRsTWFuYWdlcic7XG5pbXBvcnQge2h0dHBSZXNwb25zZSwgY29uZmlnfSBmcm9tICcuL21vY2tzLnNwZWMnO1xuXG5kZXNjcmliZSgndHRsTWFuYWdlcicsICgpID0+IHtcblxuICBsZXQgdHRsTWFuYWdlcjogVFRMTWFuYWdlcjtcbiAgY29uc3QgdHRsID0gMTAwMDtcbiAgLy8gY29uc3QgZ2V0VGltZSA9IHNweU9uKERhdGUucHJvdG90eXBlLCAnZ2V0VGltZScpO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHR0bE1hbmFnZXIgPSBuZXcgRGVmYXVsdFRUTE1hbmFnZXIoY29uZmlnKTtcbiAgfSk7XG5cbiAgLy8gZGVzY3JpYmUoJ3ZhbGlkJywgKCkgPT4ge1xuICAvLyAgIGl0KCdzaG91bGQgYmUgdmFsaWQgaWYgaGFzIGEga2V5IGFuZCAnLCAoKSA9PiB7XG4gIC8vICAgICBleHBlY3QodHRsTWFuYWdlci5oYXMobm90RXhpc3RpbmdLZXkpKS50b0JlRmFsc3koKTtcbiAgLy8gICB9KTtcbiAgLy8gICBpdCgnc2hvdWxkIHJldHVybiBmYWxzZScsICgpID0+IHtcbiAgLy8gICAgIGV4cGVjdCh0dGxNYW5hZ2VyLmhhcyhleGlzdGluZ0tleSkpLnRvQmVUcnV0aHkoKTtcbiAgLy8gICB9KTtcbiAgLy8gfSk7XG5cbiAgZmRlc2NyaWJlKCdzZXQnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBnZXQgdGhlIGNhY2hlZCByZXNwb25zZScsICgpID0+IHtcbiAgICAgIHR0bE1hbmFnZXIuc2V0KCdrZXknLCAxMDAwKTtcbiAgICAgIGV4cGVjdCh0dGxNYW5hZ2VyLmlzVmFsaWQoJ2tleScpKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdkZWxldGUnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBjbGVhciBzdG9yYWdlIHdoZW4gY2FsbCB3aXRob3V0IGEga2V5JywgKCkgPT4ge1xuICAgICAgc3B5T24oKHR0bE1hbmFnZXIgYXMgYW55KS5jYWNoZSwgJ2NsZWFyJyk7XG4gICAgICB0dGxNYW5hZ2VyLmRlbGV0ZSgpO1xuICAgICAgZXhwZWN0KCh0dGxNYW5hZ2VyIGFzIGFueSkuY2FjaGUuY2xlYXIpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGNhbGwgZGVsZXRlIHdoZW4gZ2l2ZW4ga2V5JywgKCkgPT4ge1xuICAgICAgc3B5T24oKHR0bE1hbmFnZXIgYXMgYW55KS5jYWNoZSwgJ2RlbGV0ZScpO1xuICAgICAgdHRsTWFuYWdlci5kZWxldGUoJ2tleScpO1xuICAgICAgZXhwZWN0KCh0dGxNYW5hZ2VyIGFzIGFueSkuY2FjaGUuZGVsZXRlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBkZWxldGUgYnkgcmVnZXgnLCAoKSA9PiB7XG4gICAgICBjb25zdCBrZXkgPSAnYWFhJztcbiAgICAgIHR0bE1hbmFnZXIuc2V0KGtleSwgdHRsKTtcbiAgICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cCgnYWEnKTtcbiAgICAgIHR0bE1hbmFnZXIuZGVsZXRlKHJlZ2V4KTtcbiAgICAgIGV4cGVjdCh0dGxNYW5hZ2VyLmlzVmFsaWQoa2V5KSkudG9CZUZhbHN5KCk7XG4gICAgfSk7XG4gIH0pXG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==