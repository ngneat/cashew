"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var http_1 = require("@angular/common/http");
var testing_1 = require("@angular/core/testing");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var httpCacheInterceptor_1 = require("../httpCacheInterceptor");
var mocks_spec_1 = require("./mocks.spec");
describe('HttpCacheInterceptor', function () {
    var httpCacheInterceptor;
    var handler;
    var request = function (params, method, url) {
        if (method === void 0) { method = 'GET'; }
        if (url === void 0) { url = 'api/mock'; }
        return mocks_spec_1.httpRequest(method, { params: new http_1.HttpParams({ fromObject: params }) }, url);
    };
    var httpHandler = function (response) {
        if (response === void 0) { response = {}; }
        return ({
            handle: jest.fn(function () { return rxjs_1.timer(mocks_spec_1.frame).pipe(operators_1.mapTo(new http_1.HttpResponse({ body: response }))); })
        });
    };
    var call = function (req, times, delay) {
        if (times === void 0) { times = 2; }
        if (delay === void 0) { delay = mocks_spec_1.frame; }
        for (var i = 0; i < times; i++) {
            httpCacheInterceptor.intercept(req, handler).subscribe();
            testing_1.tick(delay);
        }
    };
    beforeEach(function () {
        handler = httpHandler();
        httpCacheInterceptor = new httpCacheInterceptor_1.HttpCacheInterceptor(mocks_spec_1.httpCacheManager(), mocks_spec_1.keySerializer());
        expect.hasAssertions();
    });
    it('should cache a request', testing_1.fakeAsync(function () {
        call(request({ cache$: true }));
        expect(handler.handle).toHaveBeenCalledTimes(1);
    }));
    it('should not cache when cache$ is falsy', testing_1.fakeAsync(function () {
        call(request({ cache$: false }));
        expect(handler.handle).toHaveBeenCalledTimes(2);
    }));
    it('should not cache request of type POST', testing_1.fakeAsync(function () {
        call(request({}, 'POST'));
        expect(handler.handle).toHaveBeenCalledTimes(2);
    }));
    it('should cache request of type POST when cache$ is implicitly true', testing_1.fakeAsync(function () {
        call(request({ cache$: true }, 'POST'));
        expect(handler.handle).toHaveBeenCalledTimes(1);
    }));
    it('should not cache the request by default on explicit strategy', testing_1.fakeAsync(function () {
        call(request({}));
        expect(handler.handle).toHaveBeenCalledTimes(2);
    }));
    it('should cache the request by default on implicit strategy', testing_1.fakeAsync(function () {
        httpCacheInterceptor = new httpCacheInterceptor_1.HttpCacheInterceptor(mocks_spec_1.httpCacheManager(tslib_1.__assign({}, mocks_spec_1.config, { strategy: 'implicit' })), mocks_spec_1.keySerializer());
        call(request({}));
        expect(handler.handle).toHaveBeenCalledTimes(1);
    }));
    it('should not cache the request on implicit strategy and cache$ if falsy', testing_1.fakeAsync(function () {
        httpCacheInterceptor = new httpCacheInterceptor_1.HttpCacheInterceptor(mocks_spec_1.httpCacheManager(tslib_1.__assign({}, mocks_spec_1.config, { strategy: 'implicit' })), mocks_spec_1.keySerializer());
        call(request({ cache$: false }));
        expect(handler.handle).toHaveBeenCalledTimes(2);
    }));
    it('should return a cached request', testing_1.fakeAsync(function () {
        var cacheSpy = spyOn(httpCacheInterceptor.httpCacheManager, 'get');
        call(request({ cache$: true, paramA: true }));
        expect(cacheSpy).toHaveBeenCalledTimes(1);
    }));
    it('should return a queued request', testing_1.fakeAsync(function () {
        var cacheSpy = spyOn(httpCacheInterceptor.httpCacheManager.queue, 'get').and.callThrough();
        call(request({ cache$: true }), 2, 0);
        expect(cacheSpy).toHaveBeenCalledTimes(1);
        testing_1.tick(mocks_spec_1.frame);
    }));
    it('should refetch after ttl has passed', testing_1.fakeAsync(function () {
        call(request({ cache$: true }), 2, mocks_spec_1.ttl + mocks_spec_1.frame);
        expect(handler.handle).toHaveBeenCalledTimes(2);
    }));
    it('should not cache a request of same url and different params', testing_1.fakeAsync(function () {
        call(request({ cache$: true, paramA: true }), 1);
        call(request({ cache$: true, paramA: false }), 1);
        expect(handler.handle).toHaveBeenCalledTimes(2);
    }));
    it('should cache a request of same url and same params', testing_1.fakeAsync(function () {
        call(request({ cache$: true, paramA: true }), 2);
        expect(handler.handle).toHaveBeenCalledTimes(1);
    }));
    it('should cache a request of same url and same params in queue ', testing_1.fakeAsync(function () {
        call(request({ cache$: true, paramA: true }), 2, 0);
        expect(handler.handle).toHaveBeenCalledTimes(1);
        testing_1.tick(mocks_spec_1.frame);
    }));
    it('should fetch twice for different url', testing_1.fakeAsync(function () {
        call(request({ cache$: true }, 'GET', 'url1'), 1);
        call(request({ cache$: true }, 'GET', 'url2'), 1);
        testing_1.tick(mocks_spec_1.frame);
        expect(handler.handle).toHaveBeenCalledTimes(2);
    }));
    it('should add a request to cacheBucket', testing_1.fakeAsync(function () {
        var bucket = mocks_spec_1.cacheBucket();
        spyOn(bucket, 'add');
        call(request({ cache$: true, bucket$: bucket, key$: 'foo' }), 1);
        expect(bucket.add).toHaveBeenCalledWith('foo');
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,