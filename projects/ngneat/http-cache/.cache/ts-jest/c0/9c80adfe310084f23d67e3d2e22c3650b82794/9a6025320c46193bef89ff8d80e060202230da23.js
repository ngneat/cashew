"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var httpCacheManager_service_1 = require("../httpCacheManager.service");
var mocks_spec_1 = require("./mocks.spec");
describe('HttpCacheManager', function () {
    var httpCache;
    var queue;
    var storage;
    var guard;
    var ttlManager;
    beforeEach(function () {
        queue = mocks_spec_1.requestQueue();
        storage = mocks_spec_1.httpCacheStorage();
        guard = mocks_spec_1.httpCacheGuard();
        ttlManager = mocks_spec_1.ttlManager();
        httpCache = new httpCacheManager_service_1.HttpCacheManager(queue, storage, guard, ttlManager, mocks_spec_1.config);
    });
    afterEach(function () {
        jest.clearAllMocks();
    });
    describe('validate', function () {
        var has;
        var isValid;
        var storageDelete;
        beforeEach(function () {
            has = spyOn(storage, 'has');
            isValid = spyOn(ttlManager, 'isValid');
            storageDelete = spyOn(storage, 'delete');
        });
        it('should return true when cache is valid', function () {
            has.and.returnValue(true);
            isValid.and.returnValue(true);
            expect(httpCache.validate('valid key')).toBeTruthy();
        });
        it('should return false when cache is invalid', function () {
            has.and.returnValue(true);
            isValid.and.returnValue(false);
            expect(httpCache.validate('invalid key')).toBeFalsy();
        });
        it('should return false when key is not exist', function () {
            has.and.returnValue(false);
            isValid.and.returnValue(true);
            expect(httpCache.validate('invalid key')).toBeFalsy();
        });
        it('should call delete from storage when key is valid', function () {
            has.and.returnValue(false);
            isValid.and.returnValue(false);
            httpCache.validate('valid key');
            expect(storage.delete).toHaveBeenCalledWith('valid key');
        });
    });
    describe('add', function () {
        it('should add key to bucket', function () {
            var bucket = mocks_spec_1.cacheBucket();
            spyOn(bucket, 'add');
            httpCache.add('key', {}, { bucket: bucket });
            expect(bucket.add).toHaveBeenCalledWith('key');
        });
        it('should set the key', function () {
            spyOn(storage, 'set');
            spyOn(ttlManager, 'set');
            spyOn(queue, 'delete');
            httpCache.add('key', {}, {});
            expect(storage.set).toHaveBeenCalled();
            expect(ttlManager.set).toHaveBeenCalled();
            expect(queue.delete).toHaveBeenCalled();
        });
    });
    describe('delete', function () {
        it('should delete the key from storage and ttl', function () {
            spyOn(storage, 'delete');
            spyOn(ttlManager, 'delete');
            httpCache.delete('key');
            expect(storage.delete).toHaveBeenCalledWith('key');
            expect(ttlManager.delete).toHaveBeenCalledWith('key');
        });
        it('should clear a given cache bucket', function () {
            var bucket = mocks_spec_1.cacheBucket();
            spyOn(bucket, 'clear');
            httpCache.delete(bucket);
            expect(bucket.clear).toHaveBeenCalled();
        });
        it('should delete every key of the bucket', function () {
            spyOn(httpCache, 'delete').and.callThrough();
            var bucket = mocks_spec_1.cacheBucket();
            bucket.add('a');
            bucket.add('b');
            bucket.add('c');
            httpCache.delete(bucket);
            expect(httpCache.delete).toHaveBeenCalledTimes(4);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,