{"file":"C:\\Users\\Itay\\projects\\opensources\\http-cache\\projects\\ngneat\\http-cache\\src\\lib\\test\\ttlManager.spec.ts","mappings":";;AAAA,4CAA4D;AAC5D,2CAAkD;AAElD,QAAQ,CAAC,YAAY,EAAE;IAErB,IAAI,UAAsB,CAAC;IAC3B,IAAM,GAAG,GAAG,IAAI,CAAC;IACjB,oDAAoD;IAEpD,UAAU,CAAC;QACT,UAAU,GAAG,IAAI,8BAAiB,CAAC,mBAAM,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,4BAA4B;IAC5B,oDAAoD;IACpD,0DAA0D;IAC1D,QAAQ;IACR,sCAAsC;IACtC,wDAAwD;IACxD,QAAQ;IACR,MAAM;IAEN,SAAS,CAAC,KAAK,EAAE;QACf,EAAE,CAAC,gCAAgC,EAAE;YACnC,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC5B,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE;QACjB,EAAE,CAAC,8CAA8C,EAAE;YACjD,KAAK,CAAE,UAAkB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YAC1C,UAAU,CAAC,MAAM,EAAE,CAAC;YACpB,MAAM,CAAE,UAAkB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC7D,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,mCAAmC,EAAE;YACtC,KAAK,CAAE,UAAkB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;YAC3C,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACzB,MAAM,CAAE,UAAkB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC9D,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,wBAAwB,EAAE;YAC3B,IAAM,GAAG,GAAG,KAAK,CAAC;YAClB,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACzB,IAAM,KAAK,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC;YAC/B,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACzB,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QAC9C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\Itay\\projects\\opensources\\http-cache\\projects\\ngneat\\http-cache\\src\\lib\\test\\ttlManager.spec.ts"],"sourcesContent":["import {TTLManager, DefaultTTLManager} from '../ttlManager';\nimport {httpResponse, config} from './mocks.spec';\n\ndescribe('ttlManager', () => {\n\n  let ttlManager: TTLManager;\n  const ttl = 1000;\n  // const getTime = spyOn(Date.prototype, 'getTime');\n\n  beforeEach(() => {\n    ttlManager = new DefaultTTLManager(config);\n  });\n\n  // describe('valid', () => {\n  //   it('should be valid if has a key and ', () => {\n  //     expect(ttlManager.has(notExistingKey)).toBeFalsy();\n  //   });\n  //   it('should return false', () => {\n  //     expect(ttlManager.has(existingKey)).toBeTruthy();\n  //   });\n  // });\n\n  fdescribe('set', () => {\n    it('should get the cached response', () => {\n      ttlManager.set('key', 1000);\n      expect(ttlManager.isValid('key')).toBeTruthy();\n    });\n  });\n\n  describe('delete', () => {\n    it('should clear storage when call without a key', () => {\n      spyOn((ttlManager as any).cache, 'clear');\n      ttlManager.delete();\n      expect((ttlManager as any).cache.clear).toHaveBeenCalled();\n    });\n    it('should call delete when given key', () => {\n      spyOn((ttlManager as any).cache, 'delete');\n      ttlManager.delete('key');\n      expect((ttlManager as any).cache.delete).toHaveBeenCalled();\n    });\n    it('should delete by regex', () => {\n      const key = 'aaa';\n      ttlManager.set(key, ttl);\n      const regex = new RegExp('aa');\n      ttlManager.delete(regex);\n      expect(ttlManager.isValid(key)).toBeFalsy();\n    });\n  })\n});\n"],"version":3}