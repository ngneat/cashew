3e871621aed5e732935e18cf98e48c82
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var testing_1 = require("@angular/core/testing");
var ttlManager_1 = require("../ttlManager");
var mocks_spec_1 = require("./mocks.spec");
describe('ttlManager', function () {
    var ttlManager;
    var ttl = 1000;
    // const getTime = spyOn(Date.prototype, 'getTime');
    beforeEach(function () {
        ttlManager = new ttlManager_1.DefaultTTLManager(mocks_spec_1.config);
    });
    describe('valid', function () {
        it('should not be valid if a key does not exist', function () {
            expect(ttlManager.isValid('notExistingKey')).toBeFalsy();
        });
    });
    fdescribe('set', function () {
        it('should be valid', function () {
            ttlManager.set('key', 1000);
            expect(ttlManager.isValid('key')).toBeTruthy();
        });
        it('should not be valid after ttl is over', testing_1.fakeAsync(function () {
            ttlManager.set('key', 1000);
            testing_1.tick(1001);
            expect(ttlManager.isValid('key')).toBeFalsy();
        }));
        it('should use the config ttl if non has been passed', function () {
            spyOn(Date.prototype, 'setMilliseconds');
            ttlManager.set('key');
            expect(Date.prototype.setMilliseconds).toHaveBeenCalledWith(mocks_spec_1.config.ttl.default);
        });
    });
    describe('delete', function () {
        it('should clear storage when call without a key', function () {
            spyOn(ttlManager.cache, 'clear');
            ttlManager.delete();
            expect(ttlManager.cache.clear).toHaveBeenCalled();
        });
        it('should call delete when given key', function () {
            spyOn(ttlManager.cache, 'delete');
            ttlManager.delete('key');
            expect(ttlManager.cache.delete).toHaveBeenCalled();
        });
        it('should delete by regex', function () {
            var key = 'aaa';
            ttlManager.set(key, ttl);
            var regex = new RegExp('aa');
            ttlManager.delete(regex);
            expect(ttlManager.isValid(key)).toBeFalsy();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxJdGF5XFxwcm9qZWN0c1xcb3BlbnNvdXJjZXNcXGh0dHAtY2FjaGVcXHByb2plY3RzXFxuZ25lYXRcXGh0dHAtY2FjaGVcXHNyY1xcbGliXFx0ZXN0XFx0dGxNYW5hZ2VyLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBc0Q7QUFDdEQsNENBQTREO0FBQzVELDJDQUFrRDtBQUVsRCxRQUFRLENBQUMsWUFBWSxFQUFFO0lBRXJCLElBQUksVUFBc0IsQ0FBQztJQUMzQixJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUM7SUFDakIsb0RBQW9EO0lBRXBELFVBQVUsQ0FBQztRQUNULFVBQVUsR0FBRyxJQUFJLDhCQUFpQixDQUFDLG1CQUFNLENBQUMsQ0FBQztJQUM3QyxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxPQUFPLEVBQUU7UUFDaEIsRUFBRSxDQUFDLDZDQUE2QyxFQUFFO1lBQ2hELE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUMzRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsU0FBUyxDQUFDLEtBQUssRUFBRTtRQUNmLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRTtZQUNwQixVQUFVLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztZQUM1QixNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2pELENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLHVDQUF1QyxFQUFFLG1CQUFTLENBQUM7WUFDcEQsVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDNUIsY0FBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ1gsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNoRCxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ0osRUFBRSxDQUFDLGtEQUFrRCxFQUFFO1lBQ3JELEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLGlCQUFpQixDQUFDLENBQUM7WUFDekMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN0QixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxtQkFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNsRixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLFFBQVEsRUFBRTtRQUNqQixFQUFFLENBQUMsOENBQThDLEVBQUU7WUFDakQsS0FBSyxDQUFFLFVBQWtCLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQzFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNwQixNQUFNLENBQUUsVUFBa0IsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUM3RCxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyxtQ0FBbUMsRUFBRTtZQUN0QyxLQUFLLENBQUUsVUFBa0IsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDM0MsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN6QixNQUFNLENBQUUsVUFBa0IsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUM5RCxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyx3QkFBd0IsRUFBRTtZQUMzQixJQUFNLEdBQUcsR0FBRyxLQUFLLENBQUM7WUFDbEIsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDekIsSUFBTSxLQUFLLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDL0IsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN6QixNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzlDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXEl0YXlcXHByb2plY3RzXFxvcGVuc291cmNlc1xcaHR0cC1jYWNoZVxccHJvamVjdHNcXG5nbmVhdFxcaHR0cC1jYWNoZVxcc3JjXFxsaWJcXHRlc3RcXHR0bE1hbmFnZXIuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2Zha2VBc3luYywgdGlja30gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcbmltcG9ydCB7VFRMTWFuYWdlciwgRGVmYXVsdFRUTE1hbmFnZXJ9IGZyb20gJy4uL3R0bE1hbmFnZXInO1xuaW1wb3J0IHtodHRwUmVzcG9uc2UsIGNvbmZpZ30gZnJvbSAnLi9tb2Nrcy5zcGVjJztcblxuZGVzY3JpYmUoJ3R0bE1hbmFnZXInLCAoKSA9PiB7XG5cbiAgbGV0IHR0bE1hbmFnZXI6IFRUTE1hbmFnZXI7XG4gIGNvbnN0IHR0bCA9IDEwMDA7XG4gIC8vIGNvbnN0IGdldFRpbWUgPSBzcHlPbihEYXRlLnByb3RvdHlwZSwgJ2dldFRpbWUnKTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICB0dGxNYW5hZ2VyID0gbmV3IERlZmF1bHRUVExNYW5hZ2VyKGNvbmZpZyk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCd2YWxpZCcsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIG5vdCBiZSB2YWxpZCBpZiBhIGtleSBkb2VzIG5vdCBleGlzdCcsICgpID0+IHtcbiAgICAgIGV4cGVjdCh0dGxNYW5hZ2VyLmlzVmFsaWQoJ25vdEV4aXN0aW5nS2V5JykpLnRvQmVGYWxzeSgpO1xuICAgIH0pO1xuICB9KTtcblxuICBmZGVzY3JpYmUoJ3NldCcsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGJlIHZhbGlkJywgKCkgPT4ge1xuICAgICAgdHRsTWFuYWdlci5zZXQoJ2tleScsIDEwMDApO1xuICAgICAgZXhwZWN0KHR0bE1hbmFnZXIuaXNWYWxpZCgna2V5JykpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIG5vdCBiZSB2YWxpZCBhZnRlciB0dGwgaXMgb3ZlcicsIGZha2VBc3luYygoKSA9PiB7XG4gICAgICB0dGxNYW5hZ2VyLnNldCgna2V5JywgMTAwMCk7XG4gICAgICB0aWNrKDEwMDEpO1xuICAgICAgZXhwZWN0KHR0bE1hbmFnZXIuaXNWYWxpZCgna2V5JykpLnRvQmVGYWxzeSgpO1xuICAgIH0pKTtcbiAgICBpdCgnc2hvdWxkIHVzZSB0aGUgY29uZmlnIHR0bCBpZiBub24gaGFzIGJlZW4gcGFzc2VkJywgKCkgPT4ge1xuICAgICAgc3B5T24oRGF0ZS5wcm90b3R5cGUsICdzZXRNaWxsaXNlY29uZHMnKTtcbiAgICAgIHR0bE1hbmFnZXIuc2V0KCdrZXknKTtcbiAgICAgIGV4cGVjdChEYXRlLnByb3RvdHlwZS5zZXRNaWxsaXNlY29uZHMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGNvbmZpZy50dGwuZGVmYXVsdCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdkZWxldGUnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBjbGVhciBzdG9yYWdlIHdoZW4gY2FsbCB3aXRob3V0IGEga2V5JywgKCkgPT4ge1xuICAgICAgc3B5T24oKHR0bE1hbmFnZXIgYXMgYW55KS5jYWNoZSwgJ2NsZWFyJyk7XG4gICAgICB0dGxNYW5hZ2VyLmRlbGV0ZSgpO1xuICAgICAgZXhwZWN0KCh0dGxNYW5hZ2VyIGFzIGFueSkuY2FjaGUuY2xlYXIpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGNhbGwgZGVsZXRlIHdoZW4gZ2l2ZW4ga2V5JywgKCkgPT4ge1xuICAgICAgc3B5T24oKHR0bE1hbmFnZXIgYXMgYW55KS5jYWNoZSwgJ2RlbGV0ZScpO1xuICAgICAgdHRsTWFuYWdlci5kZWxldGUoJ2tleScpO1xuICAgICAgZXhwZWN0KCh0dGxNYW5hZ2VyIGFzIGFueSkuY2FjaGUuZGVsZXRlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBkZWxldGUgYnkgcmVnZXgnLCAoKSA9PiB7XG4gICAgICBjb25zdCBrZXkgPSAnYWFhJztcbiAgICAgIHR0bE1hbmFnZXIuc2V0KGtleSwgdHRsKTtcbiAgICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cCgnYWEnKTtcbiAgICAgIHR0bE1hbmFnZXIuZGVsZXRlKHJlZ2V4KTtcbiAgICAgIGV4cGVjdCh0dGxNYW5hZ2VyLmlzVmFsaWQoa2V5KSkudG9CZUZhbHN5KCk7XG4gICAgfSk7XG4gIH0pXG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==