{"file":"C:\\Users\\Itay\\projects\\opensources\\http-cache\\projects\\ngneat\\http-cache\\src\\lib\\ttlManager.ts","mappings":";;;AAAA,sCAAmD;AACnD,qDAAuE;AACvE,iDAAgD;AAEhD;IAAA;IAIA,CAAC;IAAD,iBAAC;AAAD,CAAC,AAJD,IAIC;AAJqB,gCAAU;AAOhC;IAGE,2BAA+C,MAAuB;QAAvB,WAAM,GAAN,MAAM,CAAiB;QAF9D,UAAK,GAAG,IAAI,GAAG,EAAkB,CAAC;IAE+B,CAAC;IAE1E,mCAAO,GAAP,UAAQ,GAAW;QACjB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;IACpD,CAAC;IAED,+BAAG,GAAH,UAAI,GAAW,EAAE,GAAY;QAC3B,IAAI,UAAU,GAAG,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC;QAEhD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,IAAI,EAAE,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC;IAC9D,CAAC;IAED,kCAAM,GAAN,UAAO,GAAqB;QAC1B,IAAI,CAAC,GAAG,EAAE;YACR,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACnB,OAAO;SACR;QAED,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;YAC3B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAa,CAAC,CAAC;YACjC,OAAO;SACR;QAED,6BAAa,CAAC,GAAa,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3C,CAAC;IA3BU,iBAAiB;QAD7B,iBAAU,EAAE;QAIE,mBAAA,aAAM,CAAC,mCAAiB,CAAC,CAAA;;OAH3B,iBAAiB,CA4B7B;IAAD,wBAAC;CAAA,AA5BD,IA4BC;AA5BY,8CAAiB","names":[],"sources":["C:\\Users\\Itay\\projects\\opensources\\http-cache\\projects\\ngneat\\http-cache\\src\\lib\\ttlManager.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { HTTP_CACHE_CONFIG, HttpCacheConfig } from './httpCacheConfig';\nimport { deleteByRegex } from './deleteByRegex';\n\nexport abstract class TTLManager {\n  abstract isValid(key: string): boolean;\n  abstract set(key: string, ttl?: number): void;\n  abstract delete(key: string | RegExp): void;\n}\n\n@Injectable()\nexport class DefaultTTLManager {\n  private cache = new Map<string, number>();\n\n  constructor(@Inject(HTTP_CACHE_CONFIG) private config: HttpCacheConfig) {}\n\n  isValid(key: string): boolean {\n    return this.cache.get(key) > new Date().getTime();\n  }\n\n  set(key: string, ttl?: number): void {\n    let resolveTTL = ttl || this.config.ttl.default;\n\n    this.cache.set(key, new Date().setMilliseconds(resolveTTL));\n  }\n\n  delete(key?: string | RegExp): void {\n    if (!key) {\n      this.cache.clear();\n      return;\n    }\n\n    if (typeof key === 'string') {\n      this.cache.delete(key as string);\n      return;\n    }\n\n    deleteByRegex(key as RegExp, this.cache);\n  }\n}\n"],"version":3}