{"file":"C:\\Users\\Itay\\projects\\opensources\\http-cache\\projects\\ngneat\\http-cache\\src\\lib\\test\\httpCacheInterceptor.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\Itay\\projects\\opensources\\http-cache\\projects\\ngneat\\http-cache\\src\\lib\\test\\httpCacheInterceptor.spec.ts"],"sourcesContent":["import {HttpHandler, HttpResponse, HttpParams} from '@angular/common/http';\nimport {fakeAsync, tick} from '@angular/core/testing';\nimport {timer} from 'rxjs';\nimport {mapTo} from 'rxjs/operators';\nimport {HttpCacheInterceptor} from '../httpCacheInterceptor';\nimport {httpCacheManager, keySerializer, httpRequest, config, frame, ttl, cacheBucket} from './mocks.spec';\n\ndescribe('HttpCacheInterceptor', () => {\n  let httpCacheInterceptor: HttpCacheInterceptor;\n  let handler: HttpHandler;\n  let request = (params, method = 'GET', url = 'api/mock') => httpRequest(\n    method,\n    {params: new HttpParams({fromObject: params})},\n    url\n  );\n  const httpHandler = (response = {}): HttpHandler => ({\n    handle: jest.fn(() => timer(frame).pipe(mapTo(new HttpResponse({body: response}))))\n  });\n  const call = (req, times = 2, delay = frame) => {\n    for(let i = 0; i < times; i++) {\n      httpCacheInterceptor.intercept(req, handler).subscribe();\n      tick(delay);\n    }\n  };\n\n  beforeEach(() => {\n    handler = httpHandler();\n    httpCacheInterceptor = new HttpCacheInterceptor(httpCacheManager(), keySerializer());\n    expect.hasAssertions();\n  });\n\n  it('should cache a request', fakeAsync(() => {\n    call(request({cache$: true}));\n    expect(handler.handle).toHaveBeenCalledTimes(1);\n  }));\n\n  it('should not cache when cache$ is falsy', fakeAsync(() => {\n    call(request({cache$: false}));\n    expect(handler.handle).toHaveBeenCalledTimes(2);\n  }));\n\n  it('should not cache request of type POST', fakeAsync(() => {\n    call(request({}, 'POST'));\n    expect(handler.handle).toHaveBeenCalledTimes(2);\n  }));\n\n  it('should cache request of type POST when cache$ is implicitly true', fakeAsync(() => {\n    call(request({cache$: true}, 'POST'));\n    expect(handler.handle).toHaveBeenCalledTimes(1);\n  }));\n\n  it('should not cache the request by default on explicit strategy', fakeAsync(() => {\n    call(request({}));\n    expect(handler.handle).toHaveBeenCalledTimes(2);\n  }));\n\n  it('should cache the request by default on implicit strategy', fakeAsync(() => {\n    httpCacheInterceptor = new HttpCacheInterceptor(\n      httpCacheManager({...config, strategy: 'implicit'}),\n      keySerializer()\n    );\n    call(request({}));\n    expect(handler.handle).toHaveBeenCalledTimes(1);\n  }));\n\n  it('should not cache the request on implicit strategy and cache$ if falsy', fakeAsync(() => {\n    httpCacheInterceptor = new HttpCacheInterceptor(\n        httpCacheManager({...config, strategy: 'implicit'}),\n        keySerializer()\n    );\n    call(request({cache$: false}));\n    expect(handler.handle).toHaveBeenCalledTimes(2);\n  }));\n\n  it('should return a cached request', fakeAsync(() => {\n    const cacheSpy = spyOn((httpCacheInterceptor as any).httpCacheManager, 'get');\n    call(request({cache$: true, paramA: true}));\n    expect(cacheSpy).toHaveBeenCalledTimes(1);\n  }));\n\n  it('should return a queued request', fakeAsync(() => {\n    const cacheSpy = spyOn((httpCacheInterceptor as any).httpCacheManager.queue, 'get').and.callThrough();\n    call(request({cache$: true}), 2, 0);\n    expect(cacheSpy).toHaveBeenCalledTimes(1);\n    tick(frame);\n  }));\n\n  it('should refetch after ttl has passed', fakeAsync(() => {\n    call(request({cache$: true}), 2, ttl + frame);\n    expect(handler.handle).toHaveBeenCalledTimes(2);\n  }));\n\n  it('should not cache a request of same url and different params', fakeAsync(() => {\n    call(request({cache$: true, paramA: true}), 1);\n    call(request({cache$: true, paramA: false}), 1);\n    expect(handler.handle).toHaveBeenCalledTimes(2);\n  }));\n\n  it('should cache a request of same url and same params', fakeAsync(() => {\n    call(request({cache$: true, paramA: true}), 2);\n    expect(handler.handle).toHaveBeenCalledTimes(1);\n  }));\n\n  it('should cache a request of same url and same params in queue ', fakeAsync(() => {\n    call(request({cache$: true, paramA: true}), 2, 0);\n    expect(handler.handle).toHaveBeenCalledTimes(1);\n    tick(frame);\n  }));\n\n  it('should fetch twice for different url', fakeAsync(() => {\n    call(request({cache$: true}, 'GET', 'url1'), 1);\n    call(request({cache$: true}, 'GET', 'url2'), 1);\n    tick(frame);\n    expect(handler.handle).toHaveBeenCalledTimes(2);\n  }));\n\n  it('should add a request to cacheBucket', fakeAsync(() => {\n    const bucket = cacheBucket();\n    spyOn(bucket, 'add');\n    call(request({cache$: true, bucket$: bucket, key$: 'foo'}), 1);\n    expect(bucket.add).toHaveBeenCalledWith('foo');\n  }));\n\n});\n"],"version":3}