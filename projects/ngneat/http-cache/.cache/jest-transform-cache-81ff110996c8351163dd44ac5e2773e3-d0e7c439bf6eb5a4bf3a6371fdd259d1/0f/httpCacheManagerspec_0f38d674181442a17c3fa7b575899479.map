{"file":"C:\\Users\\Itay\\projects\\opensources\\http-cache\\projects\\ngneat\\http-cache\\src\\lib\\test\\httpCacheManager.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\Itay\\projects\\opensources\\http-cache\\projects\\ngneat\\http-cache\\src\\lib\\test\\httpCacheManager.spec.ts"],"sourcesContent":["import {HttpCacheGuard} from '../httpCacheGuard';\nimport {HttpCacheManager} from '../httpCacheManager.service';\nimport {HttpCacheStorage} from '../httpCacheStorage';\nimport {RequestsQueue} from '../requestsQueue';\nimport {TTLManager} from '../ttlManager';\nimport {config, requestQueue, httpCacheStorage, httpCacheGuard, ttlManager as makeTTL, cacheBucket} from './mocks.spec';\nimport Spy = jasmine.Spy;\n\n\ndescribe('HttpCacheManager', () => {\n\n  let httpCache: HttpCacheManager;\n  let queue: RequestsQueue;\n  let storage: HttpCacheStorage;\n  let guard: HttpCacheGuard;\n  let ttlManager: TTLManager;\n\n  beforeEach(() => {\n    queue = requestQueue();\n    storage = httpCacheStorage();\n    guard = httpCacheGuard();\n    ttlManager = makeTTL();\n\n    httpCache = new HttpCacheManager(\n      queue,\n      storage,\n      guard,\n        ttlManager,\n      config\n    );\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('validate', () => {\n    let has: Spy;\n    let isValid: Spy;\n    let storageDelete: Spy;\n\n    beforeEach(() => {\n      has = spyOn(storage, 'has');\n      isValid = spyOn(ttlManager, 'isValid');\n      storageDelete = spyOn(storage, 'delete');\n    });\n\n    it('should return true when cache is valid', () => {\n      has.and.returnValue(true);\n      isValid.and.returnValue(true);\n      expect(httpCache.validate('valid key')).toBeTruthy();\n    });\n    it('should return false when cache is invalid', () => {\n      has.and.returnValue(true);\n      isValid.and.returnValue(false);\n      expect(httpCache.validate('invalid key')).toBeFalsy();\n    });\n    it('should return false when key is not exist', () => {\n      has.and.returnValue(false);\n      isValid.and.returnValue(true);\n      expect(httpCache.validate('invalid key')).toBeFalsy();\n    });\n    it('should call delete from storage when key is valid', () => {\n      has.and.returnValue(false);\n      isValid.and.returnValue(false);\n      httpCache.validate('valid key');\n      expect(storage.delete).toHaveBeenCalledWith('valid key');\n    })\n  });\n\n  describe('add', () => {\n    it('should add key to bucket', () => {\n      const bucket = cacheBucket();\n      spyOn(bucket, 'add');\n      httpCache.add('key', {}, {bucket: bucket});\n      expect(bucket.add).toHaveBeenCalledWith('key');\n    });\n    it('should set the key', () => {\n      spyOn(storage, 'set');\n      spyOn(ttlManager, 'set');\n      spyOn(queue, 'delete');\n      httpCache.add('key', {}, {});\n      expect(storage.set).toHaveBeenCalled();\n      expect(ttlManager.set).toHaveBeenCalled();\n      expect(queue.delete).toHaveBeenCalled();\n    });\n  });\n\n  describe('delete', () => {\n    it('should delete the key from storage and ttl', () => {\n      spyOn(storage, 'delete');\n      spyOn(ttlManager, 'delete');\n      httpCache.delete('key');\n      expect(storage.delete).toHaveBeenCalledWith('key');\n      expect(ttlManager.delete).toHaveBeenCalledWith('key');\n    });\n    it('should clear a given cache bucket', () => {\n      const bucket = cacheBucket();\n      spyOn(bucket, 'clear');\n      httpCache.delete(bucket);\n      expect(bucket.clear).toHaveBeenCalled();\n    });\n    it('should delete every key of the bucket', () => {\n      spyOn(httpCache, 'delete').and.callThrough();\n      const bucket = cacheBucket();\n      bucket.add('a');\n      bucket.add('b');\n      bucket.add('c');\n      httpCache.delete(bucket);\n      expect(httpCache.delete).toHaveBeenCalledTimes(4);\n    });\n  });\n\n});\n"],"version":3}