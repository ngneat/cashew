{"file":"C:\\Users\\Itay\\projects\\opensources\\http-cache\\projects\\ngneat\\http-cache\\src\\lib\\test\\httpCacheDecorator.spec.ts","mappings":";;;AAAA,iDAAsD;AACtD,6BAA2B;AAC3B,4CAA2D;AAC3D,4DAAgD;AAEhD,IAAM,KAAK,GAAG,IAAI,CAAC;AAEnB;IAAA;IAWA,CAAC;IARC,wBAAG,GAAH;QACE,OAAO,YAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,eAAG,CAAC,cAAM,OAAA,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAhB,CAAgB,CAAC,CAAC,CAAC;IACxD,CAAC;IAGD,+BAAU,GAAV;QACE,OAAO,YAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,eAAG,CAAC,cAAM,OAAA,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAhB,CAAgB,CAAC,CAAC,CAAC;IACxD,CAAC;IAPD;QADC,8BAAS,EAAE;;;;yCAGX;IAGD;QADC,8BAAS,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,EAAE,KAAK,GAAG,CAAC,CAAC;;;;gDAGxD;IACH,iBAAC;CAAA,AAXD,IAWC;AAED,QAAQ,CAAC,WAAW,EAAE;IAEpB,IAAI,UAAsB,CAAC;IAE3B,UAAU,CAAC;QACT,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,mBAAS,CAAC;QACvC,UAAU,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,UAAA,IAAI;YAC7B,UAAU,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,UAAA,KAAK;gBAC9B,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAC;QACH,cAAI,CAAC,KAAK,CAAC,CAAC;IACd,CAAC,CAAC,CAAC,CAAC;IAEJ,EAAE,CAAC,uCAAuC,EAAE,mBAAS,CAAC;QACpD,UAAU,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,iBAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,UAAA,IAAI;YAC3D,UAAU,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,UAAA,KAAK;gBACrC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC7B,cAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YAClB,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAC;QACH,cAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC,CAAC;AAEN,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\Itay\\projects\\opensources\\http-cache\\projects\\ngneat\\http-cache\\src\\lib\\test\\httpCacheDecorator.spec.ts"],"sourcesContent":["import {fakeAsync, tick} from '@angular/core/testing';\nimport {timer} from 'rxjs';\nimport {map, take, switchMap, delay} from 'rxjs/operators';\nimport {HttpCache} from '../httpCacheDecorator';\n\nconst frame = 1000;\n\nclass DummyClass {\n\n  @HttpCache()\n  get() {\n    return timer(frame).pipe(map(() => ({ foo: 'bar' })));\n  }\n\n  @HttpCache({ bufferSize: 1, refCount: false }, frame * 2)\n  getWithTTL() {\n    return timer(frame).pipe(map(() => ({ foo: 'bar' })));\n  }\n}\n\ndescribe('HttpCache', () => {\n\n  let dummyClass: DummyClass;\n\n  beforeEach(() => {\n    dummyClass = new DummyClass();\n  });\n\n  it('should cache the request', fakeAsync(() => {\n    dummyClass.get().subscribe(data => {\n      dummyClass.get().subscribe(data2 => {\n        expect(data).toBe(data2);\n      })\n    });\n    tick(frame);\n  }));\n\n  it('should bust the cache when ttl arrive', fakeAsync(() => {\n    dummyClass.getWithTTL().pipe(delay(frame * 2)).subscribe(data => {\n      dummyClass.getWithTTL().subscribe(data2 => {\n        expect(data).not.toBe(data2);\n        tick(frame * 4);\n      })\n    });\n    tick(frame * 4);\n  }));\n\n});\n"],"version":3}