{"file":"C:\\Users\\Itay\\projects\\opensources\\http-cache\\projects\\ngneat\\http-cache\\src\\lib\\test\\httpCacheManager.spec.ts","mappings":";;AAAA,wEAA6D;AAC7D,2CAA2H;AAE3H,QAAQ,CAAC,kBAAkB,EAAE;IAE3B,IAAI,SAA2B,CAAC;IAChC,UAAU,CAAC;QACT,SAAS,GAAG,IAAI,2CAAgB,CAAC,yBAAY,EAAE,6BAAgB,EAAE,2BAAc,EAAE,uBAAU,EAAE,mBAAM,CAAC,CAAC;IACvG,CAAC,CAAC,CAAC;IACH,SAAS,CAAC;QACR,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,UAAU,EAAE;QACnB,EAAE,CAAC,wCAAwC,EAAE;YAC1C,6BAAgB,CAAC,GAAW,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YACnD,uBAAU,CAAC,OAAe,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAClD,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;QACjD,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,qCAAqC,EAAE;YACvC,6BAAgB,CAAC,GAAW,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YACpD,uBAAU,CAAC,OAAe,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YACnD,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;YAC9C,MAAM,CAAC,6BAAgB,CAAC,MAAM,EAAE,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACvD,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,EAAE;QACd,EAAE,CAAC,aAAa,EAAE;YAChB,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACrB,MAAM,CAAC,6BAAgB,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAClD,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,EAAE;QACd,EAAE,CAAC,aAAa,EAAE;YAChB,2BAA2B;QAC7B,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,EAAE;QACd,EAAE,CAAC,aAAa,EAAE;YAChB,2BAA2B;QAC7B,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE;QACjB,EAAE,CAAC,aAAa,EAAE;YAChB,2BAA2B;QAC7B,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\Itay\\projects\\opensources\\http-cache\\projects\\ngneat\\http-cache\\src\\lib\\test\\httpCacheManager.spec.ts"],"sourcesContent":["import {HttpCacheManager} from '../httpCacheManager.service';\nimport {httpCacheGuard, httpCacheStorage, ttlManager, config, httpRequest, httpResponse, requestQueue} from './mocks.spec';\n\ndescribe('HttpCacheManager', () => {\n\n  let httpCache: HttpCacheManager;\n  beforeEach(() => {\n    httpCache = new HttpCacheManager(requestQueue, httpCacheStorage, httpCacheGuard, ttlManager, config);\n  });\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('validate', () => {\n    it('should return true when cache is valid', () => {\n      (httpCacheStorage.has as any).mockReturnValue(true);\n      (ttlManager.isValid as any).mockReturnValue(true);\n      expect(httpCache.validate('key')).toBeTruthy();\n    });\n    it('should call delete and return false', () => {\n      (httpCacheStorage.has as any).mockReturnValue(false);\n      (ttlManager.isValid as any).mockReturnValue(false);\n      expect(httpCache.validate('key')).toBeFalsy();\n      expect(httpCacheStorage.delete()).toHaveBeenCalled();\n    })\n  });\n\n  describe('get', () => {\n    it('should work', () => {\n      httpCache.get('key');\n      expect(httpCacheStorage.get).toHaveBeenCalled();\n    })\n  });\n\n  describe('has', () => {\n    it('should work', () => {\n      // expect(httpCache.has());\n    })\n  });\n\n  describe('add', () => {\n    it('should work', () => {\n      // expect(httpCache.add());\n    })\n  });\n\n  describe('delete', () => {\n    it('should work', () => {\n      // expect(httpCache.add());\n    })\n  });\n\n});\n"],"version":3}