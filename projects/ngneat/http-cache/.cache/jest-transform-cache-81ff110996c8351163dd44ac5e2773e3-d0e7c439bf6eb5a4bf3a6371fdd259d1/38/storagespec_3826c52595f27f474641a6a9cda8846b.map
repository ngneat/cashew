{"file":"C:\\Users\\Itay\\projects\\opensources\\http-cache\\projects\\ngneat\\http-cache\\src\\lib\\test\\storage.spec.ts","mappings":";;AAAA,wDAA4D;AAC5D,2CAA0C;AAE1C,SAAS,CAAC,kBAAkB,EAAE;IAE5B,IAAI,OAAgC,CAAC;IACrC,IAAM,WAAW,GAAG,aAAa,CAAC;IAClC,IAAM,cAAc,GAAG,gBAAgB,CAAC;IACxC,IAAM,QAAQ,GAAG,yBAAY,EAAE,CAAC;IAEhC,UAAU,CAAC;QACT,OAAO,GAAG,IAAI,0CAAuB,EAAE,CAAC;QACxC,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAA;IACpC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,EAAE;QACd,EAAE,CAAC,qBAAqB,EAAE;YACxB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QAClD,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,qBAAqB,EAAE;YACxB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;QAChD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,EAAE;QACd,EAAE,CAAC,gCAAgC,EAAE;YACnC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE;QACjB,EAAE,CAAC,8CAA8C,EAAE;YACjD,KAAK,CAAE,OAAe,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YACvC,OAAO,CAAC,MAAM,EAAE,CAAC;YACjB,MAAM,CAAE,OAAe,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC1D,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,mCAAmC,EAAE;YACtC,KAAK,CAAE,OAAe,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;YACxC,OAAO,CAAC,MAAM,EAAE,CAAC;YACjB,MAAM,CAAE,OAAe,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC3D,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,wBAAwB,EAAE;YAC3B,IAAM,GAAG,GAAG,KAAK,CAAC;YAClB,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;YAC3B,IAAM,KAAK,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC;YAC/B,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACtB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACvC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\Itay\\projects\\opensources\\http-cache\\projects\\ngneat\\http-cache\\src\\lib\\test\\storage.spec.ts"],"sourcesContent":["import {DefaultHttpCacheStorage} from '../httpCacheStorage';\nimport {httpResponse} from './mocks.spec';\n\nfdescribe('httpCacheStorage', () => {\n\n  let storage: DefaultHttpCacheStorage;\n  const existingKey = 'existingKey';\n  const notExistingKey = 'notExistingKey';\n  const response = httpResponse();\n\n  beforeEach(() => {\n    storage = new DefaultHttpCacheStorage();\n    storage.set(existingKey, response)\n  });\n\n  describe('has', () => {\n    it('should return false', () => {\n      expect(storage.has(notExistingKey)).toBeFalsy();\n    });\n    it('should return false', () => {\n      expect(storage.has(existingKey)).toBeTruthy();\n    });\n  });\n\n  describe('get', () => {\n    it('should get the cached response', () => {\n      expect(storage.get(existingKey)).toBe(response);\n    });\n  });\n\n  describe('delete', () => {\n    it('should clear storage when call without a key', () => {\n      spyOn((storage as any).cache, 'clear');\n      storage.delete();\n      expect((storage as any).cache.clear).toHaveBeenCalled();\n    });\n    it('should call delete when given key', () => {\n      spyOn((storage as any).cache, 'delete');\n      storage.delete();\n      expect((storage as any).cache.delete).toHaveBeenCalled();\n    });\n    it('should delete by regex', () => {\n      const key = 'aaa';\n      storage.set(key, response);\n      const regex = new RegExp('aa');\n      storage.delete(regex);\n      expect(storage.has(key)).toBeFalsy();\n    });\n  })\n});\n"],"version":3}