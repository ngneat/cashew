{"file":"C:\\Users\\Itay\\projects\\opensources\\http-cache\\projects\\ngneat\\http-cache\\src\\lib\\httpCacheInterceptor.ts","mappings":";;;AAAA,sCAA2C;AAC3C,6CAA0G;AAC1G,6BAAsC;AACtC,4CAA4C;AAE5C,uEAA8D;AAC9D,2DAA0D;AAC1D,iDAAgD;AAIhD;IACE,8BAAoB,gBAAkC,EAAU,aAA4B;QAAxE,qBAAgB,GAAhB,gBAAgB,CAAkB;QAAU,kBAAa,GAAb,aAAa,CAAe;IAAG,CAAC;IAEhG,wCAAS,GAAT,UAAU,OAAyB,EAAE,IAAiB;QAAtD,iBAuCC;QAtCC,IAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QAChE,IAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC3C,IAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACvC,IAAM,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC7C,IAAM,MAAM,GAAQ,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAElD,IAAM,KAAK,GAAG,uCAAkB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QACrD,IAAM,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAEhD,IAAI,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,WAAW,EAAE,KAAK,CAAC,EAAE;YAC1D,MAAM,IAAK,MAAsB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC3C,2DAA2D;YAC3D,aAAa;YACb,IAAI,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBACxC,aAAa;gBACb,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;aAC7C;YAED,IAAI,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;gBACvC,OAAO,SAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;aAC3C;YACD,8DAA8D;YAC9D,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CACpC,eAAG,CAAC,UAAA,KAAK;gBACP,IAAI,KAAK,YAAY,mBAAY,EAAE;oBACjC,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC;iBAC9C;YACH,CAAC,CAAC,EACF,iBAAK,EAAE,CACR,CAAC;YAEF,aAAa;YACb,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;YAE7C,OAAO,MAAM,CAAC;SACf;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IA1CU,oBAAoB;QADhC,iBAAU,EAAE;iDAE2B,2CAAgB,EAAyB,6BAAa;OADjF,oBAAoB,CA2ChC;IAAD,2BAAC;CAAA,AA3CD,IA2CC;AA3CY,oDAAoB","names":[],"sources":["C:\\Users\\Itay\\projects\\opensources\\http-cache\\projects\\ngneat\\http-cache\\src\\lib\\httpCacheInterceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { share, tap } from 'rxjs/operators';\n\nimport { HttpCacheManager } from './httpCacheManager.service';\nimport { cloneWithoutParams } from './cloneWithoutParams';\nimport { KeySerializer } from './keySerializer';\nimport { CacheBucket } from './cacheBucket';\n\n@Injectable()\nexport class HttpCacheInterceptor implements HttpInterceptor {\n  constructor(private httpCacheManager: HttpCacheManager, private keySerializer: KeySerializer) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const canActivate = this.httpCacheManager._canActivate(request);\n    const cache = request.params.get('cache$');\n    const ttl = request.params.get('ttl$');\n    const customKey = request.params.get('key$');\n    const bucket: any = request.params.get('bucket$');\n\n    const clone = cloneWithoutParams(request, customKey);\n    const key = this.keySerializer.serialize(clone);\n\n    if (this.httpCacheManager._isCacheable(canActivate, cache)) {\n      bucket && (bucket as CacheBucket).add(key);\n      // TODO: wouldn't _queue be better instead of ts-ignore it.\n      // @ts-ignore\n      if (this.httpCacheManager.queue.has(key)) {\n        // @ts-ignore\n        return this.httpCacheManager.queue.get(key);\n      }\n\n      if (this.httpCacheManager.validate(key)) {\n        return of(this.httpCacheManager.get(key));\n      }\n      //TODO: I would split that to function (for readability sake).\n      const shared = next.handle(clone).pipe(\n        tap(event => {\n          if (event instanceof HttpResponse) {\n            this.httpCacheManager._set(key, event, +ttl);\n          }\n        }),\n        share()\n      );\n\n      // @ts-ignore\n      this.httpCacheManager.queue.set(key, shared);\n\n      return shared;\n    }\n\n    return next.handle(clone);\n  }\n}\n"],"version":3}