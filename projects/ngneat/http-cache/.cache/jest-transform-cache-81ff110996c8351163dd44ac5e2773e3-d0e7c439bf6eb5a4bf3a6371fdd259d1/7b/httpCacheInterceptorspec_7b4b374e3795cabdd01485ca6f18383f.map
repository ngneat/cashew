{"file":"C:\\Users\\Itay\\projects\\opensources\\http-cache\\projects\\ngneat\\http-cache\\src\\lib\\test\\httpCacheInterceptor.spec.ts","mappings":"AAAA,8CAA8C;AAC9C,6GAA6G;AAC7G,yCAAyC;AACzC,+CAA+C;AAC/C,EAAE;AACF,iEAAiE;AACjE,6DAA6D;AAC7D,mDAAmD;AACnD,+CAA+C;AAC/C,EAAE;AACF,gBAAgB;AAChB,iEAAiE;AACjE,gGAAgG;AAChG,EAAE;AACF,0FAA0F;AAC1F,kEAAkE;AAClE,kDAAkD;AAClD,8CAA8C;AAC9C,oDAAoD;AACpD,yDAAyD;AACzD,EAAE;AACF,4DAA4D;AAC5D,uDAAuD;AACvD,EAAE;AACF,+DAA+D;AAC/D,oDAAoD;AACpD,EAAE;AACF,sBAAsB;AACtB,+CAA+C;AAC/C,wBAAwB;AACxB,kDAAkD;AAClD,UAAU;AACV,EAAE;AACF,8CAA8C;AAC9C,gDAAgD;AAChD,UAAU;AACV,EAAE;AACF,gDAAgD;AAChD,yBAAyB;AACzB,iDAAiD;AACjD,uDAAuD;AACvD,cAAc;AACd,cAAc;AACd,kBAAkB;AAClB,WAAW;AACX,EAAE;AACF,sBAAsB;AACtB,iDAAiD;AACjD,EAAE;AACF,uBAAuB;AACvB,QAAQ;AACR,EAAE;AACF,iCAAiC;AACjC,MAAM;AACN,IAAI","names":[],"sources":["C:\\Users\\Itay\\projects\\opensources\\http-cache\\projects\\ngneat\\http-cache\\src\\lib\\test\\httpCacheInterceptor.spec.ts"],"sourcesContent":["// import { Injectable } from '@angular/core';\n// import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpResponse } from '@angular/common/http';\n// import { Observable, of } from 'rxjs';\n// import { share, tap } from 'rxjs/operators';\n//\n// import { HttpCacheManager } from './httpCacheManager.service';\n// import { cloneWithoutParams } from './cloneWithoutParams';\n// import { KeySerializer } from './keySerializer';\n// import { CacheBucket } from './cacheBucket';\n//\n// @Injectable()\n// export class HttpCacheInterceptor implements HttpInterceptor {\n//   constructor(private cacheFacade: HttpCacheManager, private keySerializer: KeySerializer) {}\n//\n//   intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n//     const canActivate = this.cacheFacade._canActivate(request);\n//     const cache = request.params.get('cache$');\n//     const ttl = request.params.get('ttl$');\n//     const customKey = request.params.get('key$');\n//     const bucket: any = request.params.get('bucket$');\n//\n//     const clone = cloneWithoutParams(request, customKey);\n//     const key = this.keySerializer.serialize(clone);\n//\n//     if (this.cacheFacade._isCacheable(canActivate, cache)) {\n//       bucket && (bucket as CacheBucket).add(key);\n//\n//       // @ts-ignore\n//       if (this.cacheFacade.queue.has(key)) {\n//         // @ts-ignore\n//         return this.cacheFacade.queue.get(key);\n//       }\n//\n//       if (this.cacheFacade.validate(key)) {\n//         return of(this.cacheFacade.get(key));\n//       }\n//\n//       const shared = next.handle(clone).pipe(\n//         tap(event => {\n//           if (event instanceof HttpResponse) {\n//             this.cacheFacade._set(key, event, +ttl);\n//           }\n//         }),\n//         share()\n//       );\n//\n//       // @ts-ignore\n//       this.cacheFacade.queue.set(key, shared);\n//\n//       return shared;\n//     }\n//\n//     return next.handle(clone);\n//   }\n// }\n"],"version":3}