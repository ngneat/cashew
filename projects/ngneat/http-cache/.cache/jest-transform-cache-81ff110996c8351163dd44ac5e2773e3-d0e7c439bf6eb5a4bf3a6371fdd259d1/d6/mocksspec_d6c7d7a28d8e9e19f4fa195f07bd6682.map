{"file":"C:\\Users\\Itay\\projects\\opensources\\http-cache\\projects\\ngneat\\http-cache\\src\\lib\\test\\mocks.spec.ts","mappings":";;AAAA,6CAAwF;AACxF,8CAA2C;AAC3C,sDAAiD;AACjD,oDAAwD;AACxD,wEAA6D;AAC7D,wDAA4D;AAC5D,kDAAsD;AACtD,kDAA+C;AAC/C,4CAAgD;AAUnC,QAAA,KAAK,GAAG,IAAI,CAAC;AACb,QAAA,MAAM,GAAG,+BAAa,CAAC;AACvB,QAAA,GAAG,GAAG,cAAM,CAAC,GAAG,CAAC,OAAO,CAAC;AAEzB,QAAA,WAAW,GAAG,UACzB,MAAsB,EACtB,OAAyB,EACzB,GAAwB;IAFxB,uBAAA,EAAA,cAAsB;IACtB,wBAAA,EAAA,YAAyB;IACzB,oBAAA,EAAA,gBAAwB;IACrB,OAAA,IAAI,kBAAW,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,CAAC;AAAzC,CAAyC,CAAC;AAClC,QAAA,YAAY,GAAG,cAAM,OAAA,IAAI,mBAAY,EAAE,EAAlB,CAAkB,CAAC;AACxC,QAAA,YAAY,GAAG,cAAM,OAAA,IAAI,6BAAa,EAAE,EAAnB,CAAmB,CAAC;AACzC,QAAA,WAAW,GAAG,cAAM,OAAA,IAAI,yBAAW,EAAE,EAAjB,CAAiB,CAAC;AACtC,QAAA,gBAAgB,GAAG,cAAM,OAAA,IAAI,0CAAuB,EAAE,EAA7B,CAA6B,CAAC;AACvD,QAAA,cAAc,GAAG,cAAM,OAAA,IAAI,sCAAqB,EAAE,EAA3B,CAA2B,CAAC;AACnD,QAAA,UAAU,GAAG,UAAC,IAAa;IAAb,qBAAA,EAAA,OAAO,cAAM;IAAK,OAAA,IAAI,8BAAiB,CAAC,IAAI,CAAC;AAA3B,CAA2B,CAAC;AAC5D,QAAA,aAAa,GAAG,cAAM,OAAA,IAAI,oCAAoB,EAAE,EAA1B,CAA0B,CAAC;AACjD,QAAA,gBAAgB,GAAG,UAAC,IAAa;IAAb,qBAAA,EAAA,OAAO,cAAM;IAAK,OAAA,IAAI,2CAAgB,CACnE,oBAAY,EAAE,EACd,wBAAgB,EAAE,EAClB,sBAAc,EAAE,EAChB,kBAAU,CAAC,IAAI,CAAC,EAChB,IAAI,CACP;AANkD,CAMlD,CAAC","names":[],"sources":["C:\\Users\\Itay\\projects\\opensources\\http-cache\\projects\\ngneat\\http-cache\\src\\lib\\test\\mocks.spec.ts"],"sourcesContent":["import {HttpRequest, HttpResponse, HttpHeaders, HttpParams} from '@angular/common/http';\nimport {CacheBucket} from '../cacheBucket';\nimport {defaultConfig} from '../httpCacheConfig';\nimport {DefaultHttpCacheGuard} from '../httpCacheGuard';\nimport {HttpCacheManager} from '../httpCacheManager.service';\nimport {DefaultHttpCacheStorage} from '../httpCacheStorage';\nimport {DefaultKeySerializer} from '../keySerializer';\nimport {RequestsQueue} from '../requestsQueue';\nimport {DefaultTTLManager} from '../ttlManager';\n\nexport interface HttpOptions {\n  headers?: HttpHeaders;\n  reportProgress?: boolean;\n  params?: HttpParams;\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n  withCredentials?: boolean;\n}\n\nexport const frame = 1000;\nexport const config = defaultConfig;\nexport const ttl = config.ttl.default;\n\nexport const httpRequest = (\n  method: string = 'GET',\n  options: HttpOptions = {},\n  url: string = 'api/mock'\n) => new HttpRequest(method, url, {}, options);\nexport const httpResponse = () => new HttpResponse();\nexport const requestQueue = () => new RequestsQueue();\nexport const cacheBucket = () => new CacheBucket();\nexport const httpCacheStorage = () => new DefaultHttpCacheStorage();\nexport const httpCacheGuard = () => new DefaultHttpCacheGuard();\nexport const ttlManager = (conf = config) => new DefaultTTLManager(conf);\nexport const keySerializer = () => new DefaultKeySerializer();\nexport const httpCacheManager = (conf = config) => new HttpCacheManager(\n    requestQueue(),\n    httpCacheStorage(),\n    httpCacheGuard(),\n    ttlManager(conf),\n    conf\n);\n\n\n"],"version":3}