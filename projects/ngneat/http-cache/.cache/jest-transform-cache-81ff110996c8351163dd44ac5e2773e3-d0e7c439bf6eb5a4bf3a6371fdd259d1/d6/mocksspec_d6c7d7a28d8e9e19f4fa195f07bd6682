5aca0f2f52308a8774c36aef0437a403
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("@angular/common/http");
var cacheBucket_1 = require("../cacheBucket");
var httpCacheConfig_1 = require("../httpCacheConfig");
var httpCacheGuard_1 = require("../httpCacheGuard");
var httpCacheManager_service_1 = require("../httpCacheManager.service");
var httpCacheStorage_1 = require("../httpCacheStorage");
var keySerializer_1 = require("../keySerializer");
var requestsQueue_1 = require("../requestsQueue");
var ttlManager_1 = require("../ttlManager");
exports.frame = 1000;
exports.config = httpCacheConfig_1.defaultConfig;
exports.ttl = exports.config.ttl.default;
exports.httpRequest = function (method, options, url) {
    if (method === void 0) { method = 'GET'; }
    if (options === void 0) { options = {}; }
    if (url === void 0) { url = 'api/mock'; }
    return new http_1.HttpRequest(method, url, {}, options);
};
exports.httpResponse = function () { return new http_1.HttpResponse(); };
exports.requestQueue = function () { return new requestsQueue_1.RequestsQueue(); };
exports.cacheBucket = function () { return new cacheBucket_1.CacheBucket(); };
exports.httpCacheStorage = function () { return new httpCacheStorage_1.DefaultHttpCacheStorage(); };
exports.httpCacheGuard = function () { return new httpCacheGuard_1.DefaultHttpCacheGuard(); };
exports.ttlManager = function (conf) {
    if (conf === void 0) { conf = exports.config; }
    return new ttlManager_1.DefaultTTLManager(conf);
};
exports.keySerializer = function () { return new keySerializer_1.DefaultKeySerializer(); };
exports.httpCacheManager = function (conf) {
    if (conf === void 0) { conf = exports.config; }
    return new httpCacheManager_service_1.HttpCacheManager(exports.requestQueue(), exports.httpCacheStorage(), exports.httpCacheGuard(), exports.ttlManager(conf), conf);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxJdGF5XFxwcm9qZWN0c1xcb3BlbnNvdXJjZXNcXGh0dHAtY2FjaGVcXHByb2plY3RzXFxuZ25lYXRcXGh0dHAtY2FjaGVcXHNyY1xcbGliXFx0ZXN0XFxtb2Nrcy5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQXdGO0FBQ3hGLDhDQUEyQztBQUMzQyxzREFBaUQ7QUFDakQsb0RBQXdEO0FBQ3hELHdFQUE2RDtBQUM3RCx3REFBNEQ7QUFDNUQsa0RBQXNEO0FBQ3RELGtEQUErQztBQUMvQyw0Q0FBZ0Q7QUFVbkMsUUFBQSxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBQ2IsUUFBQSxNQUFNLEdBQUcsK0JBQWEsQ0FBQztBQUN2QixRQUFBLEdBQUcsR0FBRyxjQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQztBQUV6QixRQUFBLFdBQVcsR0FBRyxVQUN6QixNQUFzQixFQUN0QixPQUF5QixFQUN6QixHQUF3QjtJQUZ4Qix1QkFBQSxFQUFBLGNBQXNCO0lBQ3RCLHdCQUFBLEVBQUEsWUFBeUI7SUFDekIsb0JBQUEsRUFBQSxnQkFBd0I7SUFDckIsT0FBQSxJQUFJLGtCQUFXLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsT0FBTyxDQUFDO0FBQXpDLENBQXlDLENBQUM7QUFDbEMsUUFBQSxZQUFZLEdBQUcsY0FBTSxPQUFBLElBQUksbUJBQVksRUFBRSxFQUFsQixDQUFrQixDQUFDO0FBQ3hDLFFBQUEsWUFBWSxHQUFHLGNBQU0sT0FBQSxJQUFJLDZCQUFhLEVBQUUsRUFBbkIsQ0FBbUIsQ0FBQztBQUN6QyxRQUFBLFdBQVcsR0FBRyxjQUFNLE9BQUEsSUFBSSx5QkFBVyxFQUFFLEVBQWpCLENBQWlCLENBQUM7QUFDdEMsUUFBQSxnQkFBZ0IsR0FBRyxjQUFNLE9BQUEsSUFBSSwwQ0FBdUIsRUFBRSxFQUE3QixDQUE2QixDQUFDO0FBQ3ZELFFBQUEsY0FBYyxHQUFHLGNBQU0sT0FBQSxJQUFJLHNDQUFxQixFQUFFLEVBQTNCLENBQTJCLENBQUM7QUFDbkQsUUFBQSxVQUFVLEdBQUcsVUFBQyxJQUFhO0lBQWIscUJBQUEsRUFBQSxPQUFPLGNBQU07SUFBSyxPQUFBLElBQUksOEJBQWlCLENBQUMsSUFBSSxDQUFDO0FBQTNCLENBQTJCLENBQUM7QUFDNUQsUUFBQSxhQUFhLEdBQUcsY0FBTSxPQUFBLElBQUksb0NBQW9CLEVBQUUsRUFBMUIsQ0FBMEIsQ0FBQztBQUNqRCxRQUFBLGdCQUFnQixHQUFHLFVBQUMsSUFBYTtJQUFiLHFCQUFBLEVBQUEsT0FBTyxjQUFNO0lBQUssT0FBQSxJQUFJLDJDQUFnQixDQUNuRSxvQkFBWSxFQUFFLEVBQ2Qsd0JBQWdCLEVBQUUsRUFDbEIsc0JBQWMsRUFBRSxFQUNoQixrQkFBVSxDQUFDLElBQUksQ0FBQyxFQUNoQixJQUFJLENBQ1A7QUFOa0QsQ0FNbEQsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXEl0YXlcXHByb2plY3RzXFxvcGVuc291cmNlc1xcaHR0cC1jYWNoZVxccHJvamVjdHNcXG5nbmVhdFxcaHR0cC1jYWNoZVxcc3JjXFxsaWJcXHRlc3RcXG1vY2tzLnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtIdHRwUmVxdWVzdCwgSHR0cFJlc3BvbnNlLCBIdHRwSGVhZGVycywgSHR0cFBhcmFtc30gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtDYWNoZUJ1Y2tldH0gZnJvbSAnLi4vY2FjaGVCdWNrZXQnO1xuaW1wb3J0IHtkZWZhdWx0Q29uZmlnfSBmcm9tICcuLi9odHRwQ2FjaGVDb25maWcnO1xuaW1wb3J0IHtEZWZhdWx0SHR0cENhY2hlR3VhcmR9IGZyb20gJy4uL2h0dHBDYWNoZUd1YXJkJztcbmltcG9ydCB7SHR0cENhY2hlTWFuYWdlcn0gZnJvbSAnLi4vaHR0cENhY2hlTWFuYWdlci5zZXJ2aWNlJztcbmltcG9ydCB7RGVmYXVsdEh0dHBDYWNoZVN0b3JhZ2V9IGZyb20gJy4uL2h0dHBDYWNoZVN0b3JhZ2UnO1xuaW1wb3J0IHtEZWZhdWx0S2V5U2VyaWFsaXplcn0gZnJvbSAnLi4va2V5U2VyaWFsaXplcic7XG5pbXBvcnQge1JlcXVlc3RzUXVldWV9IGZyb20gJy4uL3JlcXVlc3RzUXVldWUnO1xuaW1wb3J0IHtEZWZhdWx0VFRMTWFuYWdlcn0gZnJvbSAnLi4vdHRsTWFuYWdlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSHR0cE9wdGlvbnMge1xuICBoZWFkZXJzPzogSHR0cEhlYWRlcnM7XG4gIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbjtcbiAgcGFyYW1zPzogSHR0cFBhcmFtcztcbiAgcmVzcG9uc2VUeXBlPzogJ2FycmF5YnVmZmVyJyB8ICdibG9iJyB8ICdqc29uJyB8ICd0ZXh0JztcbiAgd2l0aENyZWRlbnRpYWxzPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNvbnN0IGZyYW1lID0gMTAwMDtcbmV4cG9ydCBjb25zdCBjb25maWcgPSBkZWZhdWx0Q29uZmlnO1xuZXhwb3J0IGNvbnN0IHR0bCA9IGNvbmZpZy50dGwuZGVmYXVsdDtcblxuZXhwb3J0IGNvbnN0IGh0dHBSZXF1ZXN0ID0gKFxuICBtZXRob2Q6IHN0cmluZyA9ICdHRVQnLFxuICBvcHRpb25zOiBIdHRwT3B0aW9ucyA9IHt9LFxuICB1cmw6IHN0cmluZyA9ICdhcGkvbW9jaydcbikgPT4gbmV3IEh0dHBSZXF1ZXN0KG1ldGhvZCwgdXJsLCB7fSwgb3B0aW9ucyk7XG5leHBvcnQgY29uc3QgaHR0cFJlc3BvbnNlID0gKCkgPT4gbmV3IEh0dHBSZXNwb25zZSgpO1xuZXhwb3J0IGNvbnN0IHJlcXVlc3RRdWV1ZSA9ICgpID0+IG5ldyBSZXF1ZXN0c1F1ZXVlKCk7XG5leHBvcnQgY29uc3QgY2FjaGVCdWNrZXQgPSAoKSA9PiBuZXcgQ2FjaGVCdWNrZXQoKTtcbmV4cG9ydCBjb25zdCBodHRwQ2FjaGVTdG9yYWdlID0gKCkgPT4gbmV3IERlZmF1bHRIdHRwQ2FjaGVTdG9yYWdlKCk7XG5leHBvcnQgY29uc3QgaHR0cENhY2hlR3VhcmQgPSAoKSA9PiBuZXcgRGVmYXVsdEh0dHBDYWNoZUd1YXJkKCk7XG5leHBvcnQgY29uc3QgdHRsTWFuYWdlciA9IChjb25mID0gY29uZmlnKSA9PiBuZXcgRGVmYXVsdFRUTE1hbmFnZXIoY29uZik7XG5leHBvcnQgY29uc3Qga2V5U2VyaWFsaXplciA9ICgpID0+IG5ldyBEZWZhdWx0S2V5U2VyaWFsaXplcigpO1xuZXhwb3J0IGNvbnN0IGh0dHBDYWNoZU1hbmFnZXIgPSAoY29uZiA9IGNvbmZpZykgPT4gbmV3IEh0dHBDYWNoZU1hbmFnZXIoXG4gICAgcmVxdWVzdFF1ZXVlKCksXG4gICAgaHR0cENhY2hlU3RvcmFnZSgpLFxuICAgIGh0dHBDYWNoZUd1YXJkKCksXG4gICAgdHRsTWFuYWdlcihjb25mKSxcbiAgICBjb25mXG4pO1xuXG5cbiJdLCJ2ZXJzaW9uIjozfQ==