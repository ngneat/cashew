{"file":"C:\\Users\\Itay\\projects\\opensources\\http-cache\\projects\\ngneat\\http-cache\\src\\lib\\httpCacheManager.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\Itay\\projects\\opensources\\http-cache\\projects\\ngneat\\http-cache\\src\\lib\\httpCacheManager.service.ts"],"sourcesContent":["import { HttpResponse } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { HTTP_CACHE_CONFIG, HttpCacheConfig } from './httpCacheConfig';\nimport { HttpCacheStorage } from './httpCacheStorage';\nimport { TTLManager } from './ttlManager';\nimport { HttpCacheGuard } from './httpCacheGuard';\nimport { RequestsQueue } from './requestsQueue';\nimport { HttpCacheRequest } from './types';\nimport { CacheBucket } from './cacheBucket';\n\n@Injectable()\nexport class HttpCacheManager {\n  constructor(\n    private queue: RequestsQueue,\n    private storage: HttpCacheStorage,\n    private guard: HttpCacheGuard,\n    private ttlManager: TTLManager,\n    @Inject(HTTP_CACHE_CONFIG) private config: HttpCacheConfig\n  ) {}\n\n  validate(key: string) {\n    const has = this.storage.has(key);\n    const isValid = this.ttlManager.isValid(key);\n    if (has && isValid) return true;\n\n    this.storage.delete(key);\n    return false;\n  }\n\n  get(key: string) {\n    return this.storage.get(key);\n  }\n\n  has(key: string) {\n    return this.storage.has(key);\n  }\n\n  //TODO: { ttl, bucket } needs to be optional\n  add(key: string, body: HttpResponse<any> | any, { ttl, bucket }: { ttl?: number; bucket?: CacheBucket }) {\n    let response = body;\n\n    if (!(body instanceof HttpResponse)) {\n      response = new HttpResponse({\n        body,\n        status: 200,\n        url: key\n      });\n    }\n\n    this._set(key, response, ttl);\n    if (bucket) {\n      bucket.add(key);\n    }\n  }\n\n  delete(key?: string | RegExp | CacheBucket): void {\n    if (key instanceof CacheBucket) {\n      key.forEach(value => this.delete(value));\n      key.clear();\n      return;\n    }\n\n    this.storage.delete(key);\n    this.ttlManager.delete(key);\n  }\n\n  //TODO: add types\n  _isCacheable(canActivate: boolean, cache: any) {\n    const strategy = this.config.strategy;\n    if (strategy === 'explicit') {\n      return cache;\n    }\n\n    if (canActivate && strategy === 'implicit') {\n      return cache !== false;\n    }\n\n    return false;\n  }\n\n  _set(key: string, response: HttpResponse<any>, ttl: number) {\n    this.storage.set(key, response);\n    this.ttlManager.set(key, ttl);\n    //TODO: I would move it out to the interceptor\n    this.queue.delete(key);\n  }\n\n  _canActivate(request: HttpCacheRequest) {\n    return this.guard.canActivate(request);\n  }\n}\n"],"version":3}